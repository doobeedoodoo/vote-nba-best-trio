import React from 'react';
import { API, graphqlOperation } from 'aws-amplify'

//Import queries. Take note that these are generated by Amplify for us.
import { listCandidates as ListCandidates } from './graphql/queries'
import { updateCandidate as UpdateCandidate } from './graphql/mutations'
import { Bar, Line, Pie } from 'react-chartjs-2';

class App extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      candidates: [],
      chartData: {}
    }
  }


  getChartData() {
    this.setState(
      {
        chartData: {
          labels: ['Jordan Pippen Rodman', 'James Wade Bosh', 'Curry Thompson Green', 'Duncan Ginobili Parker', 'Bryant O\'Neal Horry'],
          datasets: [
            {
              label: 'NBA Trio',
              data: [
                this.state.candidates[0].votes,
                this.state.candidates[1].votes,
                this.state.candidates[2].votes,
                this.state.candidates[3].votes,
                this.state.candidates[4].votes,
              ],
              backgroundColor: [
                'rgba(255, 0, 0, 1)',
                'rgba(0, 0, 0, 1)',
                'rgba(255, 255, 0, 1)',
                'rgba(128, 128, 128, 1)',
                'rgba(128, 0, 128, 1)'
              ]
            }
          ]
        }
      }
    )
  }

  async componentDidMount() {
    try {
      const candidateData = await API.graphql(graphqlOperation(ListCandidates))
      this.setState({
        candidates: candidateData.data.listCandidates.items
      })
    } catch (err) {
      console.error('Error fetching data.', err)
    }

    this.getChartData();
  }

  //Handle vote clicks.
  async handleClick(candidate, event) {

    //Look up item in our current state using the item's ID.
    var candidateIndex = this.state.candidates.findIndex(x => x.id === candidate.id)
    //Retrieve vote count.
    var currentVotes = this.state.candidates[candidateIndex].votes
    //Increment.
    this.state.candidates[candidateIndex].votes = currentVotes + 1

    var chartIndex = this.state.chartData.labels.findIndex(function (x) {

      if (x == candidate.name) {
        return true
      }
      return false
    })

    const newChartData = this.state.chartData
    newChartData.datasets[0].data[chartIndex] = currentVotes + 1

    //Set the new state.
    this.setState({
      candidates: this.state.candidates,
      chartData: newChartData
    })

    //Update the database.
    try {
      await API.graphql(graphqlOperation(UpdateCandidate, { input: { id: candidate.id, votes: this.state.candidates[candidateIndex].votes } }))
    } catch (err) {
      console.log('Error updating item.', err)
    }
  }

  render() {
    return (
      <>
        {
          this.state.candidates.map((c, index) => (
            <div key={index}>
              <h3>{c.name}</h3>
              <button onClick={(e) => this.handleClick(c, e)}>VOTE</button>
              <h5>{c.description}</h5>
              <p>{c.votes}</p>
            </div>
          ))
        }

        <Bar
          redraw
          data={this.state.chartData}
          width={100}
          height={50}
          options={{
            title: {
              display: this.props.displayTitle,
              text: 'NBA All-Time Favorite Trios'
            },
            legend: {
              display: this.props.displayLegend,
              position: this.props.legendPosition
            }
          }}
        />
      </>
    )
  }
}

export default App