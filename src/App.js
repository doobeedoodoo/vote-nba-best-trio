import React from 'react';
import { API, graphqlOperation } from 'aws-amplify'

//Import queries. Take note that these are generated by Amplify for us.
import { listCandidates as ListCandidates } from './graphql/queries'
import { updateCandidate as UpdateCandidate } from './graphql/mutations'

//For charting.
import { Bar, Line, Pie, Doughnut } from 'react-chartjs-2';

//Bootstrap.
import Button from 'react-bootstrap/Button';
import Card from 'react-bootstrap/Card';
import CardDeck from 'react-bootstrap/CardDeck';

class App extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      candidates: [],
      chartData: {},
      hasNotVoted: true
    }
  }

  async componentDidMount() {
    try {
      //Using our GraphQL query, retrieve candidates from our database.
      const candidateData = await API.graphql(graphqlOperation(ListCandidates))
      //Set initial values for candidates.
      this.setState({
        candidates: candidateData.data.listCandidates.items
      })
    } catch (err) {
      console.error('Error fetching data.', err)
    }
    //Set initial values for chart data.
    this.getChartData();
  }

  //Handle vote clicks.
  async handleClick(candidate, event) {

    //Look for candidateIndex of candidate in our current state using the item's ID.
    var candidateIndex = this.state.candidates.findIndex(x => x.id === candidate.id)
    //Retrieve vote count.
    var currentVotes = this.state.candidates[candidateIndex].votes
    //Increment.
    this.state.candidates[candidateIndex].votes = currentVotes + 1
    //Look for chartIndex of candidate in our current state using the item's name.
    var chartIndex = this.state.chartData.labels.findIndex(function (x) {
      if (x === candidate.name) {
        return true
      }
      return false
    })
    //Retrieve current chartData.
    const newChartData = this.state.chartData
    //Modify chartData to reflect vote increase.
    newChartData.datasets[0].data[chartIndex] = currentVotes + 1

    //Set the new state to force render().
    this.setState({
      candidates: this.state.candidates,
      chartData: newChartData,
      hasNotVoted: false
    })

    //Update the database.
    try {
      await API.graphql(graphqlOperation(UpdateCandidate, { input: { id: candidate.id, votes: this.state.candidates[candidateIndex].votes } }))
    } catch (err) {
      console.log('Error updating item.', err)
    }
  }

  render() {
    return (
      <>
        <CardDeck>
          {
            this.state.candidates.map((c, index) => (
              <Card style={{ width: '18rem' }}>
                <Card.Img variant="top" src="holder.js/100px180"></Card.Img>
                <Card.Body>
                  <Card.Title>{c.description}</Card.Title>
                  <Card.Text>
                    Some quick example text to build on the card title and make up the bulk of
                    the card's content.
                  </Card.Text>
                  {this.state.hasNotVoted &&
                    <Button variant="primary" onClick={(e) => this.handleClick(c, e)}>VOTE</Button>
                  }
                </Card.Body>
              </Card>

              // <div key={index}>
              //   <h3>{c.name}</h3>
              //   {/* Hide vote button after user has voted.*/}
              //   {this.state.hasNotVoted &&
              //     <button onClick={(e) => this.handleClick(c, e)}>VOTE</button>
              //   }
              //   <h5>{c.description}</h5>
              //   <p>{c.votes}</p>
              // </div>
            ))
          }
        </CardDeck>

        {/* Show results only after user has voted.*/}
        {
          !this.state.hasNotVoted &&
          <Bar
            redraw
            data={this.state.chartData}
            width={100}
            height={50}
            options={{
              title: {
                display: this.props.displayTitle,
                text: 'NBA All-Time Favorite Trios'
              },
              legend: {
                display: false,
              },
              scales: {
                yAxes: [
                  {
                    display: true
                  }
                ]
              }
            }}
          />
        }

      </>
    )
  }

  getChartData() {
    this.setState(
      {
        chartData: {
          labels: ['Jordan Pippen Rodman', 'James Wade Bosh', 'Curry Thompson Green', 'Duncan Ginobili Parker', 'Bryant O\'Neal Horry'],
          datasets: [
            {
              label: 'NBA Trio',
              data: [
                this.state.candidates[0].votes,
                this.state.candidates[1].votes,
                this.state.candidates[2].votes,
                this.state.candidates[3].votes,
                this.state.candidates[4].votes,
              ],
              backgroundColor: [
                'rgba(255, 0, 0, 1)',
                'rgba(0, 0, 0, 1)',
                'rgba(0, 0, 255, 1)',
                'rgba(128, 128, 128, 1)',
                'rgba(128, 0, 128, 1)'
              ],
              
            }
          ]
        }
      }
    )
  }
}

export default App